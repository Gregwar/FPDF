<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<TITLE>Adding new fonts and encoding support</TITLE>
<LINK TYPE="text/css" REL="stylesheet" HREF="../fpdf.css">
</HEAD>
<BODY>
<H2>Adding new fonts and encoding support</H2>
This tutorial explains how to use TrueType fonts so that you are not limited to the standard
fonts any more. The other interest is that you can choose the font encoding, which allows you to
use other languages than the Western ones (the standard fonts having too few available characters).
<BR>
<BR>
There are two ways to use a new font: embedding it in the PDF or not. When a font is not
embedded, it is sought in the system. The advantage is that the PDF file is lighter; on the other
hand, if it is not available, a substitution font is used. So it is preferable to ensure that the
needed font is installed on the client systems. If the file is to be viewed by a large audience,
it is better to embed.
<BR>
<BR>
Adding a new font requires three steps:
<UL>
<LI>Generation of the metric file (.afm)
<LI>Generation of the font definition file (.php)
<LI>Declaration of the font in the script
</UL>
<H4 CLASS='st'>Generation of the metric file</H4>
The first step consists in generating the AFM file. A free utility exists to do this task:
<A HREF="http://ttf2pt1.sourceforge.net" TARGET="_BLANK">ttf2pt1</A>. The Windows binary is
available <A HREF="http://www.fpdf.org/fr/dl.php?id=22">here</A>. The command line to use is
the following:
<BR>
<BR>
<TT>ttf2pt1 -a font.ttf font</TT>
<BR>
<BR>
For example, for Comic Sans MS Regular:
<BR>
<BR>
<TT>ttf2pt1 -a c:\windows\fonts\comic.ttf comic</TT>
<BR>
<BR>
Two files are created; the one we are interested in is comic.afm.
<H4 CLASS='st'>Generation of the font definition file</H4>
The second step consists in generating a PHP file containing all the information needed by FPDF;
in addition, the font file is compressed. To do this, a helper script is provided in the font/makefont/
directory of the package: makefont.php. It contains the following function:
<BR>
<BR>
<TT>MakeFont(<B>string</B> fontfile, <B>string</B> afmfile [, <B>string</B> enc [, <B>array</B> patch]])</TT>
<BR>
<BR>
<TT><U>fontfile</U></TT>
<BLOCKQUOTE>
Path to the .ttf file.
</BLOCKQUOTE>
<TT><U>afmfile</U></TT>
<BLOCKQUOTE>
Path to the .afm file.
</BLOCKQUOTE>
<TT><U>enc</U></TT>
<BLOCKQUOTE>
Name of the encoding to use. Default value: <TT>cp1252</TT>.
</BLOCKQUOTE>
<TT><U>patch</U></TT>
<BLOCKQUOTE>
Optional modification of the encoding. Empty by default.
</BLOCKQUOTE>
<BR>
If you don't want to embed the font, pass an empty string as first parameter.
<BR>
Note: in the case of a font with the same name as a standard one, for instance arial.ttf, it is
mandatory to embed. If you don't, Acrobat will use its own font.
<BR>
<BR>
The AFM file is the one previously generated.
<BR>
<BR>
The encoding defines the association between a code (from 0 to 255) and a character. The first
128 are fixed and correspond to ASCII; the following are variable. The encodings are stored in
.map files. Those available are:
<UL>
<LI>cp1250 (Central Europe)
<LI>cp1251 (Cyrillic)
<LI>cp1252 (Western Europe)
<LI>cp1253 (Greek)
<LI>ISO-8859-1 (Western Europe)
<LI>ISO-8859-2 (Central Europe)
<LI>ISO-8859-5 (Cyrillic)
<LI>ISO-8859-7 (Greek)
<LI>ISO-8859-15 (Western Europe)
<LI>ISO-8859-16 (Central Europe)
<LI>KOI8-R (Cyrillic)
</UL>
Of course, the font must contain the characters corresponding to the chosen encoding.
<BR>
In the particular case of a symbolic font (that is to say which does not contain letters, such
as Symbol or ZapfDingbats), pass an empty string.
<BR>
The encodings which begin with cp are those used by Windows; Linux systems usually use ISO.
<BR>
Remark: the standard fonts use cp1252.
<BR>
<BR>
The last parameter gives the possibility to alter the encoding. Sometimes you may want to add
some characters. For instance, ISO-8859-1 does not contain the euro symbol. To add it at position
164, pass <TT>array(164=>'Euro')</TT>.
<BR>
<BR>
After you have called the function (create a new file for this and include makefont.php, or
simply add the call directly inside), a .php file is created, with the same name as the .afm one.
You may rename it if you wish. If the case of embedding, the font file is compressed and gives a
second file with .z as extension (except if the compression function is not available, it
requires Zlib). You may rename it too, but in this case you have to alter the variable <TT>$file</TT>
in the .php file accordingly.
<BR>
<BR>
Example:
<BR>
<BR>
<TT>MakeFont('c:\\windows\\fonts\\comic.ttf','comic.afm','cp1252');</TT>
<BR>
<BR>
which gives the files comic.php and comic.z.
<BR>
<BR>
Then you have to copy the generated file(s) either in the directory of the script which will use
the font, or in the directory given by FPDF_FONTPATH if the constant is defined. If the font file
could not be compressed, copy the .ttf instead of the .z.
<H4 CLASS='st'>Declaration of the font in the script</H4>
The last step is the most simple. You just need to call the <A HREF='../doc/addfont.htm'>AddFont()</A> method. For instance:
<BR>
<BR>
<TABLE WIDTH="100%" BGCOLOR="#E0E0E0"><TR><TD>
<TT>
$pdf-&gt;AddFont('Comic','','comic.php');
</TT>
</TD></TR></TABLE><BR>
or simply:
<BR>
<BR>
<TABLE WIDTH="100%" BGCOLOR="#E0E0E0"><TR><TD>
<TT>
$pdf-&gt;AddFont('Comic');
</TT>
</TD></TR></TABLE><BR>
And the font is now available (in regular and underlined styles), usable like the others. If we
had worked with Comic Sans MS Bold (comicbd.ttf), we would have put:
<BR>
<BR>
<TABLE WIDTH="100%" BGCOLOR="#E0E0E0"><TR><TD>
<TT>
$pdf-&gt;AddFont('Comic','B','comicbd.php');
</TT>
</TD></TR></TABLE><BR>
<H4 CLASS='st'>Exemple</H4>
Let's now see a small complete example. The font used is Calligrapher, available at
<A HREF="http://www.abstractfonts.com/fonts/" TARGET="_blank">www.abstractfonts.com</A> (a site
offering numerous free TrueType fonts). The first step is the generation of the AFM file:
<BR>
<BR>
<TT>ttf2pt1 -a calligra.ttf calligra</TT>
<BR>
<BR>
which gives calligra.afm (and calligra.t1a that we can delete). Then we generate the definition
file:
<BR>
<BR>
<TABLE WIDTH="100%" BGCOLOR="#E0E0E0"><TR><TD>
<TT>
&lt;?php<BR>
require('../font/makefont/makefont.php');<BR>
<BR>
MakeFont('calligra.ttf','calligra.afm');<BR>
?&gt;
</TT>
</TD></TR></TABLE><BR>
The function call gives the following report:
<BR>
<BR>
<B>Warning:</B> character Euro is missing<BR>
<B>Warning:</B> character Zcaron is missing<BR>
<B>Warning:</B> character zcaron is missing<BR>
<B>Warning:</B> character eth is missing<BR>
Font file compressed (calligra.z)<BR>
Font definition file generated (calligra.php)<BR>
<BR>
The euro character is not present in the font (it is too old). Three other characters are missing
too, but we are not interested in them anyway.
<BR>
We can now copy the two files in the font directory, or put them in the same directory as our
script:
<BR>
<BR>
<TABLE WIDTH="100%" BGCOLOR="#E0E0E0"><TR><TD>
<TT>
&lt;?php<BR>
require('fpdf.php');<BR>
<BR>
$pdf=new FPDF();<BR>
$pdf-&gt;Open();<BR>
$pdf-&gt;AddPage();<BR>
$pdf-&gt;AddFont('Calligrapher','','calligra.php');<BR>
$pdf-&gt;SetFont('Calligrapher','',35);<BR>
$pdf-&gt;Cell(0,10,'Enjoy new fonts with FPDF!');<BR>
$pdf-&gt;Output();<BR>
?&gt;
</TT>
</TD></TR></TABLE><BR>
<SCRIPT>
<!--
if(document.location.href.indexOf('http:')==0)
{
document.write("<A HREF='tuto7.php' TARGET='_blank' CLASS='demo'>[Demo]</A><BR><BR>");
}
//-->
</SCRIPT>
<B>Note:</B> a bug affects the Acrobat 5 plug-in under IE and the new font does not appear
immediately (a substitution font is used). You have to cause a window refresh (by resizing,
scrolling or switching) to make it show up.
<H4 CLASS='st'>About the euro symbol</H4>
The euro character is not present in all encodings, and is not always placed at the same position:
<BR>
<BR>
<TABLE BORDER="2" CELLSPACING="0" CELLPADDING="2" BGCOLOR="#FFFFEE">
<TR><TD>cp1250</TD><TD>128<BR></TD></TR>
<TR><TD>cp1251</TD><TD>136<BR></TD></TR>
<TR><TD>cp1252</TD><TD>128<BR></TD></TR>
<TR><TD>cp1253</TD><TD>128<BR></TD></TR>
<TR><TD>ISO-8859-1</TD><TD>absent&nbsp;<BR></TD></TR>
<TR><TD>ISO-8859-2</TD><TD>absent&nbsp;<BR></TD></TR>
<TR><TD>ISO-8859-5</TD><TD>absent&nbsp;<BR></TD></TR>
<TR><TD>ISO-8859-7</TD><TD>absent&nbsp;<BR></TD></TR>
<TR><TD>ISO-8859-15&nbsp;</TD><TD>164<BR></TD></TR>
<TR><TD>ISO-8859-16&nbsp;</TD><TD>164<BR></TD></TR>
<TR><TD>KOI8-R</TD><TD>absent&nbsp;<BR></TD></TR>
</TABLE>
<BR>
ISO-8859-1 is widespread but does not include the euro sign. If you need it, the simplest thing
to do is using cp1252 or ISO-8859-15 instead, which are nearly identical but contain the precious
symbol.
<BR>
As for ISO-8859-2, it is possible to use ISO-8859-16 instead, but it is recent and shows many
differences. It is therefore simpler to patch the encoding to add the symbol to it, as explained
above. The same is true for ISO-8859-5, ISO-8859-7 and KOI-R.
<H4 CLASS='st'>Font synthesis under Windows</H4>
When a font is not available in a given style, Windows is able to synthesize it from the regular
version. For instance, there is no Comic Sans MS Italic, but it can be built from Comic Sans MS
Regular. This feature can be used in a PDF file, but unfortunately requires that the regular font
be present in the system (just embed it does not work). Here is how to do it:
<UL>
<LI>Generate the definition file for the regular font without embedding (you may rename it to
reflect the desired style)
<LI>Open it and append to the variable <TT>$name</TT> a comma followed by the desired style
(<TT>Italic</TT>, <TT>Bold</TT> or <TT>BoldItalic</TT>)
</UL>
For instance, for the file comici.php:
<BR>
<BR>
<TT>$name='ComicSansMS,Italic';<BR>
<BR>
It can then be used normally:
<BR>
<BR>
<TABLE WIDTH="100%" BGCOLOR="#E0E0E0"><TR><TD>
<TT>
$pdf-&gt;AddFont('Comic','I','comici.php');
</TT>
</TD></TR></TABLE><BR>

</BODY>
</HTML>
