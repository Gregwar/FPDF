<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<TITLE>Minimal example</TITLE>
<LINK TYPE="text/css" REL="stylesheet" HREF="../fpdf.css">
</HEAD>
<BODY>
<H2>Minimal example</H2>
Let's start with the classical example:
<BR>
<BR>
<TABLE WIDTH="100%" BGCOLOR="#E0E0E0"><TR><TD>
<TT>
&lt;?php<BR>
require('fpdf.php');<BR>
<BR>
$pdf=new FPDF();<BR>
$pdf-&gt;Open();<BR>
$pdf-&gt;AddPage();<BR>
$pdf-&gt;SetFont('Arial','B',16);<BR>
$pdf-&gt;Cell(40,10,'Hello World !');<BR>
$pdf-&gt;Output();<BR>
?&gt;
</TT>
</TD></TR></TABLE><BR>
<SCRIPT>
<!--
if(document.location.href.indexOf('http:')==0)
{
document.write("<A HREF='tuto1.php'>[Demo]</A><BR><BR>");
}
//-->
</SCRIPT>
After including the library file, we create an FPDF object.
The <A HREF='../doc/fpdf.htm'>FPDF()</A> constructor is used here with the default values. Pages are in portrait and
the measure unit is millimeter. It could have been specified explicitly with:
<BR>
<BR>
<TABLE WIDTH="100%" BGCOLOR="#E0E0E0"><TR><TD>
<TT>
$pdf=new FPDF('P','mm');
</TT>
</TD></TR></TABLE><BR>
It is possible to use landscape (L) and other measure units (pt, cm, in).
<BR>
<BR>
<A HREF='../doc/open.htm'>Open()</A> starts the PDF document. There is still no page for the moment, so we have to
add one with <A HREF='../doc/addpage.htm'>AddPage()</A>. The origin is at the upper-left corner and the current position
is by default placed at 1 cm from the borders; the margins can be changed with <A HREF='../doc/setmargins.htm'>SetMargins()</A>.
<BR>
<BR>
Before we can print text, it is mandatory to select a font with <A HREF='../doc/setfont.htm'>SetFont()</A>, otherwise the
document would be invalid. We choose Arial bold 16:
<BR>
<BR>
<TABLE WIDTH="100%" BGCOLOR="#E0E0E0"><TR><TD>
<TT>
$pdf-&gt;SetFont('Arial','B',16);
</TT>
</TD></TR></TABLE><BR>
We could have specified italics with I or a font without style with an empty string. Note
that the font size is given in points, not millimeters (or another user unit); it is the only
exception. The other available fonts are Times, Courier, Symbol and ZapfDingbats.
<BR>
<BR>
We can now print a cell with <A HREF='../doc/cell.htm'>Cell()</A>. A cell is a rectangular area, possibly framed,
which contains some text. It is output at the current position. We specify its dimensions,
its text (centered or aligned), if it is framed and if the current position has to be moved
to the right or return to the beginning of the next line. To add a frame, we would do this:
<BR>
<BR>
<TABLE WIDTH="100%" BGCOLOR="#E0E0E0"><TR><TD>
<TT>
$pdf-&gt;Cell(40,10,'Hello World !',1);
</TT>
</TD></TR></TABLE><BR>
To add a new cell next to it with centered text and go to the next line, we would do:
<BR>
<BR>
<TABLE WIDTH="100%" BGCOLOR="#E0E0E0"><TR><TD>
<TT>
$pdf-&gt;Cell(60,10,'Powered by FPDF.',0,1,'C');
</TT>
</TD></TR></TABLE><BR>
Remark : the line break can also be done with <A HREF='../doc/ln.htm'>Ln()</A>. This method allows to specify
in addition the height of the break.
<BR>
<BR>
Finally, the document is closed and sent to the browser with <A HREF='../doc/output.htm'>Output()</A>. We could have saved
it in a file by passing the desired file name.
</BODY>
</HTML>
